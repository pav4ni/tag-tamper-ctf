#!/usr/bin/env bash
set -euo pipefail

# === CONFIG ===
GH_USER="YOUR_GH_USERNAME"    # <-- replace this
REPO_NAME="tag-tamper-ctf"    # repo name to create locally and push
REMOTE_PROTO="https"          # "https" or "ssh"

# Helper
remote_url() {
  if [ "$REMOTE_PROTO" = "ssh" ]; then
    echo "git@github.com:${GH_USER}/${REPO_NAME}.git"
  else
    echo "https://github.com/${GH_USER}/${REPO_NAME}.git"
  fi
}

# Workspace
workdir="$(pwd)/${REPO_NAME}_workspace"
rm -rf "$workdir"
mkdir -p "$workdir"
cd "$workdir"

echo "[*] Creating local repo: $REPO_NAME"
mkdir "$REPO_NAME" && cd "$REPO_NAME"
git init -b main

# Create some normal repo content (so tags can point to commits)
echo "Initial content" > hello.txt
git add hello.txt
git commit -m "Initial commit"

# Add a second commit (decoy content)
echo "Decoy content" > decoy.txt
git add decoy.txt
git commit -m "Add decoy file"

# Create a lightweight tag (decoy) that looks important but has NO message
git tag v1.0-light      # lightweight tag pointing at current commit
echo "[*] Created lightweight tag v1.0-light (no message)"

# Create a commit that will be the "real" tag target
echo "Real content (pre-flag commit)" > real.txt
git add real.txt
git commit -m "Prepare real commit for annotated tag"

# Create the annotated tag and hide the flag in the tag message
FLAG="FLAG{TAG_MESSAGES_HIDE_SECRETS}"
git tag -a v1.0 -m "This release fixes things.

Hidden note: ${FLAG}

Release notes end."  # the tag message contains the flag

echo "[*] Created annotated tag v1.0 with hidden flag in the tag message."

# Optional: create another annotated tag with a misleading message (decoy)
git commit --allow-empty -m "empty commit for decoy tag"
git tag -a v0.9 -m "Old release: nothing interesting here"

# Create GitHub remote (you must create the GitHub repo first if using https/gh)
# If you haven't created the repo on GitHub yet, show instructions and exit gracefully.
echo
echo " === NEXT STEP ==="
echo "If you already created a repository named \"$REPO_NAME\" on GitHub under $GH_USER,"
echo "run these commands to set the remote and push tags:"
echo
echo "  git remote add origin $(remote_url)"
echo "  git push -u origin main"
echo "  git push origin --tags"
echo
echo "If you haven't created the repo on GitHub:"
echo "  1) Go to https://github.com/new and create a new repo named \"$REPO_NAME\" (Public)."
echo "  2) Then run the three commands above."
echo
echo "Local workspace is at: $workdir/$REPO_NAME"
echo "Script finished."
